1- the benefits of Next.js 
        1- server side rendering automatically
        2- SEO (search engine optimization) => SEO is crucial for optimizing a website's visibility and ranking in search engine results
                => increase organic traffic
                =. enhanced user experience
        3- Routing (next.js uses file-based routing system)
                => the routing is handled by the file system
                => use files for the routes 
                (app)
                    (blog) => https://localhost:3000/blog
                    (about) => https://localhost:3000/about
                    (profile) => https://localhost:3000/profile

        4- FullStack applications (API Routes)
            - enabling the creation of serverless functions to handle api requests
            - serverless APIs in Next.js are a way of creating API endpoints without the need for a traditional server 
                it allows us to build and deploy APIs:
                        - without managing server infrastructure
                        - worrying about scaling scaling their server as traffic increases
            - you can use this feature , by creating (API endpoints) using file (route.js)
                    (app)
                        (blog) => route.js
                        (about) => route.js
                        (profile) => route.js

        4- Automatic Code splitting :
                => code splitting is a technique that breaks down large bundles of javascript code into smaller,
                    more manageable chunks that can be loaded as needed
                => this reduces the initial load time of a website and optimizes the user's experience while browsing
                    - instead of using in react 
                            const About = lazy(()=> import('./About'))
                            const App = ()=> {
                                return(
                                    <Suspense fallback={<div> Loading ...</div>}
                                        <About/>
                                    </Suspense>
                                )
                            }
                => But in Next.js this process is entirely Automatic
                    it uses automatic code splitting by default to split pages into separate chunks

======================= Routing    ==================

2- page.js file which is responsible for starting page

    => filenames Matter!!
            next.js relies on reserved , special filenames
            But the filenames only matter inside the app folder

        => page.js => (localhost:3000/) Define page content, is the actual content, the starting page (localhost:3000/)
        => layout.js => Define wrapper around all app or  pages (around one or more pages)
        => not-found.js => Define "not Found" fallback page
        => error.js => Define "error" fallback page
        => loading.js => Fallback page which is shown whilst sibling or nested pages (or layouts) are fetching data
        => route.js => Allows you to create an API route (i.e., a page which does NOT return JSX code but instead data, e.g., in the JSON format)


3- you can navigate between pages using links
        - However, using regular anchor elements (<a>) for navigation can cause the browser to reload the entire page,
          which is not ideal for single-page applications.
        - To maintain the single-page application behavior, Next.js provides a special Link component from next/link that you should use instead of anchor elements. 
            This Link component ensures that navigation happens client-side, without a full page reload.
        - When using the Link component, the content of the next page is still pre-rendered on the server,
          but it is sent to the client and handled by client-side JavaScript code to update the UI, 

    => we can't use <a> tag because it will reload the page 
       we use Link from next/link instead
        ex:
            <a href="/about">About us</a>
            => import Link from 'next/link'
            <Link href="/about"> About us </Link>
         

4- globals.css: Contains CSS styles for the entire application.
    import globals.css in layout.js file
     It is imported into the layout.js file to make these styles available on every page.

5- icon.png: Special file name used as a favicon for the website.
    Adding an image called icon.png to the app folder automatically sets it as the favicon.

    app folder => icon.png => icon for in the browser's tab next to the website's name

6- components folder: Contains React components that are used across multiple pages.
    These components are not automatically treated as pages by Next.js and can be used to organize your UI.

    - To use these components: 
        you can import them into your pages and render them as you would with any other React component.
    - using the @ symbol  instead of (./) to refer to the root project folder in import paths
        example: 
                import component from './components/component'
            use @ instead ./
                import component from '@/components/component'

        example: 
            import Header from "@/components/header";
            export default function Home() {
                        return (
                            <main>
                            <Header />
                            </main>
                        )}

7- dynamic route
        Dynamic routes in Next.js provide a powerful way to create dynamic content based on the URL,
        making it easier to build dynamic and flexible websites.

       1- to make dynamic route :
            - blog folder:   (/blog it will render pag.js)
                    [slug] folder: (this is dynamic route and will render page.js in every dynamic route )
                            page.js 
                    page.js

        2-    in blog => page.js =>  (localhost:3000/blog)
                        <Link href="/blog/post-1">Post 1</Link>
                        <Link href="/blog/post-2">Post 2</Link>
            
        3-    it will render in blog => [slug] => page.js => (localhost:3000/blog/post-1), (localhost:3000/blog/post-2)

        4- you can access the dynamic route with 
            = by extract the {params} and then use the dynamic route folder name 
                like {params.slug}
                
                const BlogPostPage = ({ params }) => {
                            return (
                                <main>
                                <h1>BlogPostPage</h1>
                                <p>{params.slug}</p>
                                </main>
                            );
                            };

8- import images :
        import logoImg from "@/assets/logo.png";
        <img src={logoImg.src} alt="A plate" />

9- app folder => layout.js : 
        - It is responsible for rendering the main layout of the application, which includes the main header and the main content.
        - layout : is a function component

            import MainHeader from "@/components/main-header";
            import "./globals.css";


            export default function RootLayout({ children }) {
                        return (
                            <html lang="en">
                            <body>
                                <MainHeader />
                                {children}
                            </body>
                            </html>
                        );
                        }

          -  this is the main layout for all project 
          -  you can import all components to add them to the layout


10- using css modules with Next.js
    1- global css import it  in layout.js (app =>layout.js) file 

    2- css for components (main-header.js , main-header.module.css)
        main-header.js:
             => import classes from './main-header.module.css'
               <Link  className={classes.logo} href="/" />

11- working with images

            <img src={logoImg.src} alt="A plate with food on it" />
        
    => instead of using the img tag , we can use the <Image> from next/image tag :

            1-  imported from the "next/image" module  imported from the "next/image"
                that provides optimized image loading and rendering

                import Image from "next/image";

            2- <Image src={logoImg} alt="A plate" priority fill />
                The priority attribute: which tells Next.js to prioritize الاولويه ف التحميل the loading of this image.
                This is useful for logos and other important images that should be displayed as soon as possible.
                fill attribute : the image should fill the available space in the parent component if you don't width and height of that image


12- using useState, useEffect with Next 14 
    Error: You're importing a component that needs useState. It only works in a Client Component but none of its parents are marked with "use client", so they're Server Components by default.

    1- Server Component: or (React Server Components (RSC))
            React Server Components, are rendered on the server-side. In a NextJS project
            by default, all React components are Server Components.
            This means that the components are rendered on the server, and only the finished HTML code is sent to the client's browser. 
            This approach improves performance by reducing the amount of client-side JavaScript code that needs to be downloaded. 
            It also enhances search engine optimization, as web crawlers can see pages with complete content.

           => hooks & handle user interactions are not available in server side

            example: // Server Component
                    export default function CourseList() {
                        console.log("this component run on the server")
                    return (
                        <div>
                        {/* content */}
                        </div>
                    );
                     }

    2- Client Components: 
        Client Components are rendered on the client-side. In a NextJS project
        They can contain code or use features that are only available in the client's browser, such as state hooks, event handlers, and the useEffect hook.
    
    3- Use of Client Components in NextJS ("use client") directive :
            to unlock the ability to run client-side code, utilize client-side hooks like useState, and handle user interactions directly in the browser
            developers can explicitly create Client Components by adding the useClient directive at the top of the file.
            This allows for the use of client-side features like event handlers and state management.
            "use client" //=> to unlock the ability to run client-side code, utilize client-side hooks like useState, and handle user interactions directly in the browser
            This means that this part will be created, or rendered, directly in the web browser of the person using your website. useClient, you're saying that this part of your website should be a "Client Component." 

            => components that are pre-rendered on the server but also on the client
            => hooks & handle user interactions will be available in client side



            example: // Client Component
                
                "use client"; //=> to unlock the ability to run client-side code, utilize client-side hooks like useState, and handle user interactions directly in the browser

                export default function CourseList() {
                    // Client-side code here
                    // Event handlers, state hooks, etc.
                    console.log("this component will run on the client-side because useClient we use it when working with Event handlers, state hooks,")

                    return (
                        <div>
                        {/* Course list content */}
                        </div>
                    );
                    }

            example 2:
                    // Client Component
                    "use client"

                    export default function MyComponent() {
                    const [count, setCount] = useState(0);

                    return (
                        <div>
                        <button onClick={() => setCount(count + 1)}>Click me</button>
                        <p>Count: {count}</p>
                        </div>
                    );
                    }


13- working with nav links and paths
    
    1- to get path we use usePathname() from "next/navigation"

            import { usePathname } from "next/navigation";
            const path = usePathname();
            use it like : className={
                                path.startsWith("/meals")
                                ? `${classes.link} ${classes.active}`
                                : classes.link
                            }
            another ex : className={
                                path.startsWith("/community")
                                ? `${classes.link} ${classes.active}`
                                : classes.link
                            }

    2- solve the error:
        usePathname only works in Client Components. Add the "use client" directive at the top of the file to use it. 
        add to the top of file "use client"

        Example : 
        
                        "use client";

                        import Link from "next/link";
                        import { usePathname } from "next/navigation";
                        import classes from "./nav-link.module.css";

                        const NavLink = ({ href, children }) => {
                        const path = usePathname();
                        return (
                            <Link
                            href={href}
                            className={
                                path.startsWith(href)
                                ? `${classes.link} ${classes.active}`
                                : classes.link
                            }
                            >
                            {children}
                            </Link>
                        );
                        };

                        export default NavLink;


14- Sqlite Database
    we use sqlite database because it can be used locally without need database server or any other complex setup

    install : npm install better-sqlite3